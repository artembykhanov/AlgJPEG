function [ img ] = idwt_haar( img_haar , flag )
% Функция idwt_haar выполняет обратное дискретное вейвлет-преобразование Хаара (IDWT Haar)
% img_haar: коэффициенты вейвлет-преобразования Хаара
% flag: флаг для выбора типа преобразования (0 - восстановление масштабирующего коэффициента,
% 1 - восстановление вейвлет-коэффициента)

%% Проверка размеров входного изображения
siz = size (img_haar);
if (length(siz) == 2)
    siz(3) = 1; % Если изображение черно-белое, добавляем третье измерение
end

%% Добавление нулевых столбцов для обработки на границах
img_dum = zeros(siz(1), siz(2)+1, siz(3)); % Создание временного массива с дополнительными столбцами
img_dum(1:siz(1), 2:siz(2)+1,:) = img_haar(:,:,:); % Копирование коэффициентов входного изображения во временный массив

img = zeros(siz(1), siz(2), siz(3)); % Инициализация массива для результата обратного преобразования

%% Восстановление масштабирующего коэффициента
if (flag == 0)
    Scaling0 = [1/sqrt(2) 1/sqrt(2)]; % Масштабирующий вектор
    Scaling1 = ones(siz(1),1); % Единичный вектор
    Scaling = Scaling1 * Scaling0; % Получение матрицы масштабирования
    
    for k = 1:siz(3) % Для каждого слоя изображения
        for i = 1:siz(2) % Для каждого столбца изображения
            img(:,i) = sum(img_dum(:,i:i+1) .* Scaling, 2); % Выполнение обратного преобразования Хаара для каждого столбца
        end
    end
end

%% Восстановление вейвлет-коэффициента
if (flag == 1)
    Wavelet0 = [1/sqrt(2) -1/sqrt(2)]; % Вейвлет-вектор
    Wavelet1 = ones(siz(1),1); % Единичный вектор
    Wavelet = Wavelet1 * Wavelet0; % Получение матрицы вейвлет-преобразования
    
    for k = 1:siz(3) % Для каждого слоя изображения
        for i = 1:siz(2) % Для каждого столбца изображения
            img(:,i) = sum(img_dum(:,i:i+1) .* Wavelet, 2); % Выполнение обратного преобразования Хаара для каждого столбца
        end
    end
end

end
