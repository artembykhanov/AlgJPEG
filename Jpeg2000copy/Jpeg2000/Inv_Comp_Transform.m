function [ img_out ] = Inv_Comp_Transform( img, x )
% Функция Inv_Comp_Transform выполняет обратное преобразование компонент цветности из пространства YCbCr/CoCg в RGB
% img: входное изображение
% x: тип компоненты цветности (1 - YCbCr, 2 - YCoCg, 3 - YCrCb, 4 - YCuCv)

siz = size (img); % Получаем размеры входного изображения
if (length(siz) == 2)
    siz(3) = 1; % Добавляем третье измерение, если изображение черно-белое
end
img_out = zeros(siz(1), siz(2), siz(3)); % Инициализируем массив для выходного изображения

%% YC1C2 в RGB (приближенно KLT)
if (x == 1)
    T_Matrix = [1 1 -2/3; 1 0 4/2 ; 1 -1 -2/4 ]; % Матрица трансформации
    for i = 1:siz(1)
        for j = 1:siz(2)
            B = img(i,j,:); % Получаем пиксель изображения
            C = double(B(:)); % Преобразуем в вектор
            img_out(i,j,:) = T_Matrix * C; % Применяем матрицу трансформации
        end
    end
end

%% YCoCg в RGB 
if (x == 2)
    T_Matrix = [1 1 -1; 1 0 1 ; 1 -1 -1 ]; % Матрица трансформации
    for i = 1:siz(1)
        for j = 1:siz(2)
            B = img(i,j,:); % Получаем пиксель изображения
            C = double(B(:)); % Преобразуем в вектор
            img_out(i,j,:) = T_Matrix * C; % Применяем матрицу трансформации
        end
    end
end

%% YCrCb в RGB  (JPEG-2000)
if (x == 3)
    T_Matrix = [1 1.402 0; 1 -0.714 -0.344 ; 1 0 1.772 ]; % Матрица трансформации
    for i = 1:siz(1)
        for j = 1:siz(2)
            B = img(i,j,:); % Получаем пиксель изображения
            C = double(B(:)); % Преобразуем в вектор
            img_out(i,j,:) = T_Matrix * C; % Применяем матрицу трансформации
        end
    end
end

%% YCuCv в RGB (JPEG-2000)
if (x == 4)
    T_Matrix = [1 -1/4 3/4; 1 -1/4 -1/4 ; 1 3/4 -1/4 ]; % Матрица трансформации
    for i = 1:siz(1)
        for j = 1:siz(2)
            B = img(i,j,:); % Получаем пиксель изображения
            C = double(B(:)); % Преобразуем в вектор
            img_out(i,j,:) = T_Matrix * C; % Применяем матрицу трансформации
        end
    end
end

end
